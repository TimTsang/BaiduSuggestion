{"name":"Baidusuggestion","tagline":"JavaScript","body":"BaiduSuggestion\r\n===============\r\n# JavaScript实现百度搜索suggestion功能\r\n\r\n---\r\n\r\n百度搜索suggestion功能增强了用户体验，现在很多带有搜索功能的网站都会有类似搜索suggestion功能，用以增强用户体验。\r\n暑假的时候试着做了一个百度搜索suggestion功能的demo练习，记录一下，以便以后查看。\r\n\r\n本文包括以下几个主目录：\r\n\r\n> * <i class=\"icon-chevron-sign-left\"></i> 需求分析\r\n> * <i class=\"icon-adjust\"></i> 技术分析\r\n> * <i class=\"icon-pencil\"></i> 开发工具\r\n> * <i class=\"icon-reorder\"></i> 具体的实现过程\r\n\r\n\r\n----------\r\n\r\n## 一、需求分析\r\n![百度suggestion的效果图](http://img.blog.csdn.net/20140914104219853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGltX3RzYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n\r\n\r\n### ① 基本需求：\r\n\r\n 1. 在输入框输入关键字后，出现下拉框，下拉框中为suggestion的内容。根据不同的关键字，显示不同的suggestion。\r\n 2. 下拉框支持鼠标点选，鼠标移到suggestion的选择项时，要将对应的字段自动填入百度输入框\r\n 3. 要对suggestion下拉框进行动态处理，百度输入框失去焦点时，suggestion下拉框要自动消失。\r\n 4. 下拉框支持上下键切换，键盘的上下键可对下拉框中的suggestion选项进行选择，当前选项应该自动填入百度输入框。\r\n\r\n### ② 扩展需求：\r\n\r\n 1. suggestion数据来时百度（jsonp跨域请求js）\r\n 2. 点击“百度一下”按钮可进行百度搜索。\r\n 3. 按回车键可对单前百度输入框中的字段进行搜索。\r\n\r\n\r\n----------\r\n\r\n## 二、技术分析\r\n\r\n 1. 根据suggestion字段内容，动态生成对应的suggestion下拉框，这里需要用到Dom节点的操作。\r\n 2. 鼠标点选，这里需要触发鼠标事件。\r\n 3. 键盘上下键选择，这里需要触发键盘事件\r\n 4. 动态改变CSS样式\r\n 5. 向百度后台发jsonp请求，跨域请求js。\r\n\r\n\r\n----------\r\n\r\n## 三、开发工具\r\n\r\n 1. Sublime Text\r\n 2. FireFox浏览器\r\n\r\n----------\r\n\r\n## 四、具体的实现过程\r\n### ① 雏形阶段（suggestion数据来自本地）\r\n\r\n 1. 构建基本页面\r\n *关键代码片段：*\r\n```html\r\n<form id=\"form\" name=\"myForm\">  \r\n    <div id=\"span_search\">  \r\n        <input type=\"text\" id=\"input_search\" autocomplete=\"off\" maxlength=\"100\" name=\"value_search\" onkeyup=\"keyEvent(event);\">  \r\n        <div id=\"suggestion_div\">   \r\n            <ul id=\"suggestions_ul\"></ul>   \r\n        </div>   \r\n    </div>  \r\n    <input id=\"input_button\" type=\"submit\" value=\"百度一下\" >  \r\n</form>  \r\n```\r\n 2. 动态添加下拉框\r\n*1）声明并初始化全局变量（动态添加下拉框的几个很重要的变量）*\r\n```javascript\r\nvar inputField = document.forms[\"myForm\"].input_search;  \r\nvar suggestionDiv = document.getElementById(\"suggestion_div\");  \r\nvar suggestionsUl = document.getElementById(\"suggestions_ul\");   \r\nvar suggestionLi = null; \r\n```\r\n*2）初始化数据源*\r\n```javascript\r\nvar suggestion = [\"abcde\",\"华南理工大学\",\"abcd\",\"华南师范大学\",\"abcdefg\",\"华南农业大学\",\"abcdefgh\",\"广东工业大学\",\"广东外语外贸大学\",\"计算机科学与技术\",\"广东财经大学\",\"计算机学院\",\"广州医科大学\",\"计算机\",\"广州大学\"];//模拟的数据源  \r\nsuggestion.sort(); // 按字母排序，使显示结果更友好  \r\n```\r\n*3）动态生成下拉列表*\r\n```javascript\r\nfunction setSuggestions(the_suggestions) {// 动态生成suggestion下拉框  \r\n    clearSuggestions(); // 每输入一个字符就先清除原先的提示  \r\n    suggestionDiv.className = \"show\";  \r\n    for (var i = 0; i < the_suggestions.length; i++) {// 将匹配的提示结果逐一显示给用户  \r\n        suggestionLi = document.createElement(\"li\");  \r\n        suggestionsUl.appendChild(suggestionLi);  \r\n        suggestionLi.appendChild(document.createTextNode(the_suggestions[i]));  \r\n        mouseEvent();// 对每个<li>触发鼠标事件  \r\n    }  \r\n}  \r\n```\r\n*4）鼠标事件*\r\n```javascript\r\nfunction mouseEvent(){  \r\n    suggestionLi.onmouseover = function() {  \r\n        this.className = \"mouseOver\"; // 鼠标经过时高亮  \r\n        inputField.value = this.firstChild.nodeValue;// 同时将当前的选中值赋值给百度输入框  \r\n    }  \r\n    suggestionLi.onmouseout = function() {  \r\n        this.className = \"mouseOut\"; // 离开时恢复原样  \r\n    }  \r\n    suggestionLi.onclick = function() {// 用户点击某个匹配项时清除提示框  \r\n        clearSuggestions();   \r\n    }  \r\n}  \r\n```\r\n*5）键盘事件*\r\n##### 这个键盘上下键切换是我在写雏形版时写得相对比较久的一个功能，刚开始想到利用一个标记变量来进行切换，后来发现自己越写越复杂，就只好百度了，后来发现用索引值更好，用索引值就可以标记每一个不同的`<li>`\r\n##### 向上切换的关键代码部分：\r\n```javascript\r\nsuggestionNodes.eq(selectedSuggestion).css(\"background-color\", \"white\");//先将上面一个<li>变成白色  \r\nselectedSuggestion++; // 每向下移一位，selectedSuggestion就+1  \r\nif (selectedSuggestion == suggestionNodes.length) {  \r\n    selectedSuggestion = 0;//如果索引值变成suggestionNodes.length，则将索引值指向第一个元素  \r\n}  \r\n//console.log(selectedSuggestion);  \r\nsuggestionNodes.eq(selectedSuggestion).css(\"background-color\", \"#ebebeb\");//再将下面一个<li>变成灰色  \r\n```\r\n##### 向下切换的关键代码部分：\r\n```javascript\r\nsuggestionNodes.eq(selectedSuggestion).css(\"background-color\", \"white\");//先将下面一个<li>变成白色  \r\nselectedSuggestion--;// 每向上移一位，selectedSuggestion就-1  \r\nif (selectedSuggestion == -1) {  \r\n    selectedSuggestion = suggestionNodes.length - 1;//如果索引值变成-1，则将索引值指向最后一个元素  \r\n}  \r\n//console.log(selectedSuggestion);  \r\nsuggestionNodes.eq(selectedSuggestion).css(\"background-color\", \"#ebebeb\");//再将上面一个<li>变成灰色    \r\n```\r\n*6）动态显示下拉框*\r\n##### 关键代码片段：\r\n```javascript\r\nvar aResult = []; // 用于存放匹配结果  \r\nif (inputField.value.length > 0) {  \r\n    for (var i = 0; i < suggestion.length; i++){ // 从数据源中找匹配的数据  \r\n        if (suggestion[i].indexOf(inputField.value) == 0){  \r\n            aResult.push(suggestion[i]); // 压入结果  \r\n        }   \r\n    }  \r\n    if (aResult.length > 0) // 如果有匹配的数据则显示出来  \r\n        setSuggestions(aResult);  \r\n}else  \r\nclearSuggestions(); // 此步用作用户输入（Backspace健）将输入框清除完时的处理  \r\n```\r\n##### 以上为雏形阶段的实现\r\n 3. 雏形阶段的最终结果\r\n![雏形阶段的最终结果](http://img.blog.csdn.net/20140914111514255?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGltX3RzYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n 4. 雏形阶段遇到的问题及解决方法\r\n1）未作用户按（Backspace健）将输入框清除完时的处理，导致用户删除了百度输入框的内容时，suggestion下拉提示框依然存在，影响用户体验。于是在百度输入框没有内容时，作清除suggestion下拉提示框的处理。\r\n2）未作百度输出框失去焦点时的处理，导致用户点击页面其他部分时，suggestion下拉提示框依然存在，影响用户体验。于是在百度输入框失去焦点时，清除suggestion下拉提示框。\r\n3）键盘对suggestion下拉列表的上下切换功能的问题，刚开始想到利用一个标记变量来进行切换，后来发现自己越写越复杂，后来利用索引值实现。\r\n\r\n### ②成熟阶段（发jsonp，跨域请求js）\r\n\r\n1. 自己的一些想法\r\n在做完雏形之前，我的想法如下：\r\n输入字段进行搜索时，触发onkeyup事件异步向后台传值，从后台中搜索到相应值后，后台向前端传入值（当时想到利用JSON），前端解析JSON后在搜索框下动态生成下拉框。后来想还是想在本地模拟个数据做个雏形（PS；因为前端接到后台传来的JSON对象也是要解析才能用的，在suggestion这个功能中，需要将所有的suggestion数据封装在一个数组里面，所以，我就直接模拟了一个数组，而没有模拟JSON数据，模拟JSON数据的话，还要解析，对于雏形来说就不用了）。\r\n 2. 实现发jsonp，跨域请求js\r\n有了开始时的想法，做完雏形后，就开始想是否可以向百度后台发请求，实现suggestion。于是就开始看百度搜索时到底向后发送了什么请求。打开Firebug，看到输入“百”后，貌似向后台发了两条请求\r\n![](http://img.blog.csdn.net/20140914111950781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGltX3RzYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n打开请求看了好久，也没看出点什么，未果，然后就打开“百度”，搜索了一番，发现了有用jsonp可以利用关键字获取百度suggestion数据的博文，认真的看了一番之后，发现了关键在向百度后台提交关键字的URL，在哪传值和如何获取返回的suggestion数据。然后试着直接访问http://suggestion.baidu.com/su\r\n![](http://img.blog.csdn.net/20140914112145878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGltX3RzYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n下载后打开，发现了文件中只有一段行代码\r\n```javascript\r\nwindow.baidu.sug({q:\"\",p:false,s:[]}); \r\n```\r\n数组里面就是我们需要的suggestion数据。于是，发jsonp，跨域请求js，就可以获取到suggestion数据。\r\n```javascript\r\nfunction fillUrls() {  \r\n    var strdomin = $.trim($(\"#input_search\").val());  \r\n    var qsData = { 'wd': strdomin, 'p': '3', 'cb': 'findSuggestions', 't': new Date().getMilliseconds().toString() };  \r\n  $.ajax({// 发jsonp（跨域请求js）  \r\n        async: false,  \r\n        url: \"http://suggestion.baidu.com/su\",  \r\n        type: \"GET\",  \r\n        dataType: 'jsonp',  \r\n        jsonp: 'jsoncallback',  \r\n        data: qsData,  \r\n        timeout: 500,  \r\n        success: function (json) {  \r\n        },  \r\n        error: function (xhr) {  \r\n            alert(xhr);  \r\n        }  \r\n    });  \r\n}  \r\n```\r\n用一个变量去接收suggestion数组里面的数据\r\n```javascript\r\nvar urls = strurls.s; \r\n```\r\n最终效果如下\r\n![](http://img.blog.csdn.net/20140914120227406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGltX3RzYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n用console.dir(strurls)将接收到的数据打印在控制台上也看到了返回的suggestion数据。\r\n### ③完成阶段（向百度后台提交搜索关键字进行搜索）\r\n 1. 实现前的一些想法\r\n在完成上面的成熟版之后，我想既然可以向后台提交关键字获取suggestion，应该也可以向后台提交关键字进行搜索的。（PS：好像这个并没有用到什么技术，但是觉得很有意思，就顺便做了，而且在实现的过程中也出现了一些问题，顺便也总结一下。）\r\n 2. 实现过程\r\n回想之前我们做项目时可以通过<form>表单利用action向后台提交数据的。我打开Firebug，查看百度搜索时的传值情况，发现了百度搜索的action地址是http://www.baidu.com/s\r\n\r\n![](http://img.blog.csdn.net/20140914120732312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGltX3RzYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n\r\n于是就试着去写一下，在<form>标签里加上了一句action=\"http://www.baidu.com/s\"，但是，提交了之后却变成百度首页，并没有搜索。于是，我又打开Firebug，查看百度搜索的传值情况\r\n\r\n![](http://img.blog.csdn.net/20140914121429891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGltX3RzYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n\r\n发现有两个参数有我要搜索的字段“百度云”，分别是“bs”和“wd”\r\n于是我就将输入框的mane的值改成以上两个值去试。发现“wd”就是关键字对应的字段，再查看了一下地址栏果然也没错，有传值。\r\n\r\n![](http://img.blog.csdn.net/20140914121537517?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGltX3RzYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n\r\n然后我再试着直接去修改百度搜索地址栏的值\r\n\r\n![效果图](http://img.blog.csdn.net/20140914121819367?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGltX3RzYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n\r\n发现搜索果然出现了，原来“wd”就是百度后台接受搜索关键字的字段。\r\n  ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}